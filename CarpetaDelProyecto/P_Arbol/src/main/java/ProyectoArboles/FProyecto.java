/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ProyectoArboles;

import Excepciones.ClaveNoExisteExcepcion;
import Excepciones.OrdenInvalidoException;
import Negocio.AVL;
import Negocio.ArbolB;
import Negocio.ArbolBusquedaBinaria;
import Negocio.ArbolMViasBusqueda;
import java.awt.Color;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author TEO
 */
public class FProyecto extends javax.swing.JFrame {
    
    
    String orden = "3";
    ArbolBusquedaBinaria<String,Integer> ABB = new ArbolBusquedaBinaria<>();
    AVL<String,Integer> ArbolAVL = new AVL<>();
    ArbolMViasBusqueda<String,Integer> AMV = new ArbolMViasBusqueda<>(Integer.parseInt(orden));
    ArbolB<String,Integer> AB = new ArbolB<>(Integer.parseInt(orden));
    
    
    List<String> arrayABB = new LinkedList<>();
    List<String> arrayAVL = new LinkedList<>();
    List<String> arrayAMV = new LinkedList<>();
    List<String> arrayAB = new LinkedList<>();
    
    DefaultListModel modelo1 = new DefaultListModel();
    DefaultListModel modelo2 = new DefaultListModel();
    DefaultListModel modelo3 = new DefaultListModel();
    DefaultListModel modelo4 = new DefaultListModel();
    
    public FProyecto() throws OrdenInvalidoException {
        initComponents();
        //String orden  = JOptionPane.showInputDialog("Anyone there?");
        
        listaDeNumerosABB.setModel(modelo1);
        listaDeNumerosAVL.setModel(modelo2);
        listaDeNumerosAMV.setModel(modelo3);
        listaDeNumerosAB.setModel(modelo4);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        btnAñadir = new javax.swing.JButton();
        ArbolElegido = new javax.swing.JComboBox<>();
        labelAviso = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDeNumerosABB = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaDeNumerosAVL = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaDeNumerosAMV = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaDeNumerosAB = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto Arboles Ed2");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("GESTOR DE CONTACTOS");

        txtNumero.setBackground(new java.awt.Color(255, 204, 102));
        txtNumero.setForeground(new java.awt.Color(0, 0, 0));
        txtNumero.setBorder(javax.swing.BorderFactory.createTitledBorder("Número"));
        txtNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroActionPerformed(evt);
            }
        });
        txtNumero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumeroKeyTyped(evt);
            }
        });

        txtNombre.setBackground(new java.awt.Color(255, 204, 102));
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));
        txtNombre.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre"));
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        btnAñadir.setBackground(new java.awt.Color(255, 204, 102));
        btnAñadir.setText("Añadir Contacto");
        btnAñadir.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        ArbolElegido.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos Los Arboles", "Arbol Binario De Busqueda", "AVL", "Arbol M Vias", "Arbol B" }));
        ArbolElegido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArbolElegidoActionPerformed(evt);
            }
        });

        labelAviso.setForeground(new java.awt.Color(255, 204, 102));
        labelAviso.setText("jLabel2");

        jScrollPane1.setViewportView(listaDeNumerosABB);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ArbolBB", jPanel2);

        jScrollPane2.setViewportView(listaDeNumerosAVL);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("AVL    ", jPanel4);

        jScrollPane3.setViewportView(listaDeNumerosAMV);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        jTabbedPane1.addTab("ArbolMVias", jPanel5);

        jScrollPane4.setViewportView(listaDeNumerosAB);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ArbolB   ", jPanel6);

        jButton1.setBackground(new java.awt.Color(255, 204, 102));
        jButton1.setText("Eliminar Contacto");
        jButton1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(459, 459, 459)
                .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(ArbolElegido, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelAviso, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ArbolElegido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(labelAviso, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAñadir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ArbolElegidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArbolElegidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArbolElegidoActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        if ("".equals(txtNombre.getText()) && ("".equals(txtNumero.getText()))){
            labelAviso.setText("Campos Vacios");
            labelAviso.setForeground(Color.red);
        }else{
            if ("".equals(txtNombre.getText())){
                labelAviso.setText("No se puede agregar un contacto sin Nombre");
                labelAviso.setForeground(Color.red);
                return;
            }
            if ("".equals(txtNumero.getText())){
                labelAviso.setText("No se puede agregar un contacto sin Número Telefónico");
                labelAviso.setForeground(Color.red);
                return;
            }
            if ((txtNumero.getText().length()>0) && (txtNumero.getText().length() < 8)){
                labelAviso.setText("El Numero Telefonico debe tener 8 digitos");
                labelAviso.setForeground(Color.red);
                return;
            }
            if ((!"6".equals(txtNumero.getText().substring(0, 1) )) &&
                (!"7".equals(txtNumero.getText().substring(0, 1)))){
                labelAviso.setText("Un Numero Telefonico debe empezar por el digito 6 o 7");
                labelAviso.setForeground(Color.red);
                return;
            }
            
            if (ArbolElegido.getSelectedIndex() == 0){
                ABB.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                ArbolAVL.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                AMV.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                AB.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                arrayABB = ABB.recorridoInOrden();
                arrayAVL = ArbolAVL.recorridoInOrden();
                arrayAMV = AMV.recorridoInOrden();
                arrayAB= AB.recorridoInOrden();
                List<Integer> aux1 = ABB.recorridoEnInOrdenDeValores();
                List<Integer> aux2 = ArbolAVL.recorridoEnInOrdenDeValores();
                List<Integer> aux3 = AMV.recorridoEnInOrdenDeValores();
                List<Integer> aux4 = AB.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayABB.size(); i++) {
                    arrayABB.set(i, (String)arrayABB.get(i) + "-" + Integer.toString(aux1.get(i)));
                }
                for (int i = 0; i < arrayAVL.size(); i++) {
                    arrayAVL.set(i, (String)arrayAVL.get(i) + "-" + Integer.toString(aux2.get(i)));
                }
                for (int i = 0; i < arrayAMV.size(); i++) {
                    arrayAMV.set(i, (String)arrayAMV.get(i) + "-" + Integer.toString(aux3.get(i)));
                }
                for (int i = 0; i < arrayAB.size(); i++) {
                    arrayAB.set(i, (String)arrayAB.get(i) + "-" + Integer.toString(aux4.get(i)));
                }
                modelo1.removeAllElements();
                modelo2.removeAllElements();
                modelo3.removeAllElements();
                modelo4.removeAllElements();
                for (int i = 0; i < arrayABB.size(); i++) {
                    modelo1.addElement(arrayABB.get(i));
                    listaDeNumerosABB.setModel(modelo1);
                }
                for (int i = 0; i < arrayAVL.size(); i++) {
                    modelo2.addElement(arrayAVL.get(i));
                    listaDeNumerosAVL.setModel(modelo2);
                }
                for (int i = 0; i < arrayAMV.size(); i++) {
                    modelo3.addElement(arrayAMV.get(i));
                    listaDeNumerosAMV.setModel(modelo3);
                }
                for (int i = 0; i < arrayAB.size(); i++) {
                    modelo4.addElement(arrayAB.get(i));
                    listaDeNumerosAB.setModel(modelo4);
                }
            }
            if (ArbolElegido.getSelectedIndex() == 1){
                if (ABB.buscar(txtNombre.getText()) == Integer.parseInt(txtNumero.getText())){
                    labelAviso.setText("No se puede agregar un contacto con número ya existente");
                    labelAviso.setForeground(Color.red);
                    return;
                }
                ABB.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                arrayABB = ABB.recorridoInOrden();
                List<Integer> aux = ABB.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayABB.size(); i++) {
                    arrayABB.set(i, (String)arrayABB.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo1.removeAllElements();
                for (int i = 0; i < arrayABB.size(); i++) {
                    modelo1.addElement(arrayABB.get(i));
                    listaDeNumerosABB.setModel(modelo1);
                }
            }
            if (ArbolElegido.getSelectedIndex() == 2){
                if (ArbolAVL.buscar(txtNombre.getText()) == Integer.parseInt(txtNumero.getText())){
                    labelAviso.setText("No se puede agregar un contacto con número ya existente");
                    labelAviso.setForeground(Color.red);
                    return;
                }
                ArbolAVL.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                arrayAVL = ArbolAVL.recorridoInOrden();
                List<Integer> aux = ArbolAVL.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayAVL.size(); i++) {
                    arrayAVL.set(i, (String)arrayAVL.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo2.removeAllElements();
                for (int i = 0; i < arrayAVL.size(); i++) {
                    modelo2.addElement(arrayAVL.get(i));
                    listaDeNumerosAVL.setModel(modelo2);
                }
            }
            if (ArbolElegido.getSelectedIndex() == 3){
//                if (AMV.buscar(txtNombre.getText()) == Integer.parseInt(txtNumero.getText())){
//                    labelAviso.setText("No se puede agregar un contacto con número ya existente");
//                    labelAviso.setForeground(Color.red);
//                    return;
//                }
                AMV.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                arrayAMV = AMV.recorridoInOrden();
                List<Integer> aux = AMV.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayAMV.size(); i++) {
                    arrayAMV.set(i, (String)arrayAMV.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo3.removeAllElements();
                for (int i = 0; i < arrayAMV.size(); i++) {
                    modelo3.addElement(arrayAMV.get(i));
                    listaDeNumerosAMV.setModel(modelo3);
                }
            }
            if (ArbolElegido.getSelectedIndex() == 4){
//                if (AB.buscar(txtNombre.getText()) == Integer.parseInt(txtNumero.getText())){
//                    labelAviso.setText("No se puede agregar un contacto con número ya existente");
//                    labelAviso.setForeground(Color.red);
//                    return;
//                }
                AB.insertar(txtNombre.getText(), Integer.parseInt(txtNumero.getText()));
                arrayAB= AB.recorridoInOrden();
                List<Integer> aux = AB.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayAB.size(); i++) {
                    arrayAB.set(i, (String)arrayAB.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo4.removeAllElements();
                for (int i = 0; i < arrayAB.size(); i++) {
                    modelo4.addElement(arrayAB.get(i));
                    listaDeNumerosAB.setModel(modelo4);
                }
            }
        }
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        labelAviso.setText("");
        if (txtNombre.getText().trim().length() == 25) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtNumeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroKeyTyped
        int key = evt.getKeyChar();
        labelAviso.setText("");
        boolean numeros = key >= 48 && key <= 57;
        if (!numeros) {
            evt.consume();
        }
        if (txtNumero.getText().trim().length() == 8) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNumeroKeyTyped

    private void txtNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if ("".equals(txtNombre.getText()) && ("".equals(txtNumero.getText()))){
            labelAviso.setText("Campos Vacios");
            labelAviso.setForeground(Color.red);
        } else{
            if ("".equals(txtNombre.getText())){
                labelAviso.setText("No se puede eliminar un contacto si no me da el Nombre");
                labelAviso.setForeground(Color.red);
                return;
            }
            if ("".equals(txtNumero.getText())){
                labelAviso.setText("No se puede eliminar si no me da el número");
                labelAviso.setForeground(Color.red);
                return;
            }
            if ((txtNumero.getText().length()>0) && (txtNumero.getText().length() < 8)){
                labelAviso.setText("El Numero Telefonico que desea eliminar debe tener 8 digitos");
                labelAviso.setForeground(Color.red);
                return;
            }
            if ((!"6".equals(txtNumero.getText().substring(0, 1) )) &&
                (!"7".equals(txtNumero.getText().substring(0, 1)))){
                labelAviso.setText("Numero Telefonico No Valido");
                labelAviso.setForeground(Color.red);
                return;
            }
            
            if (ArbolElegido.getSelectedIndex() == 0){
                labelAviso.setText("Para eliminar un numero debe escoger un arbol");
                labelAviso.setForeground(Color.red);
                return;
            }
            if (ArbolElegido.getSelectedIndex() == 1){
                try {
                    ABB.eliminar(txtNombre.getText());
                } catch (ClaveNoExisteExcepcion ex) {
                    labelAviso.setText("El contacto no se puede eliminar porque no existe");
                    labelAviso.setForeground(Color.red);
                }
                arrayABB = ABB.recorridoInOrden();
                List<Integer> aux = ABB.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayABB.size(); i++) {
                    arrayABB.set(i, (String)arrayABB.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo1.removeAllElements();
                for (int i = 0; i < arrayABB.size(); i++) {
                    modelo1.addElement(arrayABB.get(i));
                    listaDeNumerosABB.setModel(modelo1);
                }
                labelAviso.setText("Se eliminó el Contacto");
                labelAviso.setForeground(Color.green);
            }
            
            if (ArbolElegido.getSelectedIndex() == 2){
                try {
                    ArbolAVL.eliminar(txtNombre.getText());
                } catch (ClaveNoExisteExcepcion ex) {
                    labelAviso.setText("El contacto no se puede eliminar porque no existe");
                    labelAviso.setForeground(Color.red);
                }
                arrayAVL = ArbolAVL.recorridoInOrden();
                List<Integer> aux = ArbolAVL.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayAVL.size(); i++) {
                    arrayAVL.set(i, (String)arrayAVL.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo2.removeAllElements();
                for (int i = 0; i < arrayAVL.size(); i++) {
                    modelo2.addElement(arrayAVL.get(i));
                    listaDeNumerosAVL.setModel(modelo2);
                }
                labelAviso.setText("Se eliminó el Contacto");
                labelAviso.setForeground(Color.green);
            }
            if (ArbolElegido.getSelectedIndex() == 3){
                try {
                    AMV.eliminar(txtNombre.getText());
                } catch (ClaveNoExisteExcepcion ex) {
                    labelAviso.setText("El contacto no se puede eliminar porque no existe");
                    labelAviso.setForeground(Color.red);
                }
                arrayAMV = AMV.recorridoInOrden();
                List<Integer> aux = AMV.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayAMV.size(); i++) {
                    arrayAMV.set(i, (String)arrayAMV.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo3.removeAllElements();
                for (int i = 0; i < arrayAMV.size(); i++) {
                    modelo3.addElement(arrayAMV.get(i));
                    listaDeNumerosAMV.setModel(modelo3);
                }
                labelAviso.setText("Se eliminó el Contacto");
                labelAviso.setForeground(Color.green);
            }
            if (ArbolElegido.getSelectedIndex() == 4){
                try {
                    AB.eliminar(txtNombre.getText());
                } catch (ClaveNoExisteExcepcion ex) {
                    labelAviso.setText("El contacto no se puede eliminar porque no existe");
                    labelAviso.setForeground(Color.red);
                }
                arrayAB= AB.recorridoInOrden();
                List<Integer> aux = AB.recorridoEnInOrdenDeValores();
                for (int i = 0; i < arrayAB.size(); i++) {
                    arrayAB.set(i, (String)arrayAB.get(i) + "-" + Integer.toString(aux.get(i)));
                }
                modelo4.removeAllElements();
                for (int i = 0; i < arrayAB.size(); i++) {
                    modelo4.addElement(arrayAB.get(i));
                    listaDeNumerosAB.setModel(modelo4);
                }
                labelAviso.setText("Se eliminó el Contacto");
                labelAviso.setForeground(Color.green);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FProyecto().setVisible(true);
                } catch (OrdenInvalidoException ex) {
                    Logger.getLogger(FProyecto.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ArbolElegido;
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelAviso;
    private javax.swing.JList<String> listaDeNumerosAB;
    private javax.swing.JList<String> listaDeNumerosABB;
    private javax.swing.JList<String> listaDeNumerosAMV;
    private javax.swing.JList<String> listaDeNumerosAVL;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumero;
    // End of variables declaration//GEN-END:variables

  
}
